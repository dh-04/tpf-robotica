// Class automatically generated by Dev-C++ New Class wizard

#include <protocol/handlers/BatteryBoardPacketHandler.h> // class's header file
#include <protocol/packets/BatteryPacket.h>
#include <math.h>

namespace protocol {
namespace handlers {

// class constructor
BatteryBoardPacketHandler::BatteryBoardPacketHandler(PacketServer * ps, char groupid, char boardid)
{
	this->groupid = groupid;
	this->boardid = boardid;
	this->ps = ps;
	this->currentValue = 0;
	this->full = false;
	this->empty = false;

	#ifdef LINUX
	this->currentValueMutex = new Mutex();
	this->fullMutex = new Mutex();
	this->emptyMutex = new Mutex();
	#endif
}

// class destructor
BatteryBoardPacketHandler::~BatteryBoardPacketHandler()
{
	// insert your code here
}

void BatteryBoardPacketHandler::handlePacket(Packet * p){
	packets::BatteryPacket * bp = new packets::BatteryPacket(groupid,boardid);
	bp->analysePacket(p);
	
	if ( bp->getCommand() == CMD_BATTERY_VALUE ){
		short value = bp->getBatteryValue();
		// TODO convert from short to double

		// Lock Mutex
		#ifdef LINUX
		this->currentValueMutex->enterMutex();
		#endif

		this->currentValue = value;

		// Release Mutex
		#ifdef LINUX
		this->currentValueMutex->leaveMutex();
		#endif
	}
	if ( bp->isBatteryFull() ){
		// TODO convert from short to double

		// Lock Mutex
		#ifdef LINUX
		this->fullMutex->enterMutex();
		#endif

		this->full = true;

		// Release Mutex
		#ifdef LINUX
		this->fullMutex->leaveMutex();
		#endif
	}
	if ( bp->isBatteryEmpty() ){
		// TODO convert from short to double

		// Lock Mutex
		#ifdef LINUX
		this->emptyMutex->enterMutex();
		#endif

		this->empty = true;

		// Release Mutex
		#ifdef LINUX
		this->emptyMutex->leaveMutex();
		#endif
	}
}

void BatteryBoardPacketHandler::enable(int id){
 	packets::BatteryPacket * p = new packets::BatteryPacket(groupid,boardid);
	p->enable();
	p->prepareToSend();
	this->ps->sendPacket(p);
}

void BatteryBoardPacketHandler::disable(int id){
 	packets::BatteryPacket * p = new packets::BatteryPacket(groupid,boardid);
	p->disable();
	p->prepareToSend();
	this->ps->sendPacket(p);
}

double BatteryBoardPacketHandler::getValue(int id){
 	packets::BatteryPacket * p = new packets::BatteryPacket(groupid,boardid);
	p->senseBattery();
	p->prepareToSend();
	this->ps->sendPacket(p);
	// Lock mutex
	#ifdef LINUX
	this->currentValueMutex->enterMutex();
	#endif

	double value = this->currentValue;

	// Release mutex
	#ifdef LINUX
	this->currentValueMutex->leaveMutex();
	#endif
	return value;
}

bool BatteryBoardPacketHandler::isFull(int id){
	// Lock mutex
	#ifdef LINUX
	this->fullMutex->enterMutex();
	#endif

	bool full = this->full;

	// Release mutex
	#ifdef LINUX
	this->fullMutex->leaveMutex();
	#endif
	return full;
}

void BatteryBoardPacketHandler::setEmptyBias(int id, double bias){
	packets::BatteryPacket * p = new packets::BatteryPacket(groupid,boardid);
	// TODO convert from double to char
	p->setBatteryEmptyThreshold((char)bias);
	p->prepareToSend();
	this->ps->sendPacket(p);
}

bool BatteryBoardPacketHandler::isEmpty(int id){
	// Lock mutex
	#ifdef LINUX
	// TODO Change "LINUX" Appareances in all documents for __linux__
	this->emptyMutex->enterMutex();
	#endif

	bool empty = this->empty;

	// Release mutex
	#ifdef LINUX
	this->emptyMutex->leaveMutex();
	#endif
	return empty;
}

void BatteryBoardPacketHandler::setFullBias(int id, double bias){
	packets::BatteryPacket * p = new packets::BatteryPacket(groupid,boardid);
	// TODO convert from double to char
	p->setBatteryFullThreshold(bias);
	p->prepareToSend();
	this->ps->sendPacket(p);
}

}
}

