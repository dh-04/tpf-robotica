// Class automatically generated by Dev-C++ New Class wizard

#include "GoToBaseGroup.h" // class's header file
#include <math.h>

namespace behaviours {

// class constructor
GoToBaseGroup::GoToBaseGroup(WorldInfo * wi, robotapi::IBattery * robotBatt, robotapi::IBattery * pcBatt, robotapi::IDifferentialWheels * wheels, std::vector<robotapi::IDistanceSensor*> & fss) : AbstractBehaviour("Go To Base Group")
{
	this->robotBattery = robotBatt;
	this->pcBattery = pcBatt;
	this->wi = wi;
	this->fss = &fss;
	
	behaviours::AbstractBehaviour * ab = new behaviours::FindLine( wi, wheels, fss );
	myBehaviours[0] = ab;

	ab = new behaviours::PositionInLine( wi, wheels, fss );
	myBehaviours[1] = ab;

	ab = new behaviours::GoToBase( wheels, fss );
	myBehaviours[2] = ab;
	
}

// class destructor
GoToBaseGroup::~GoToBaseGroup()
{
	// insert your code here
}

void GoToBaseGroup::sense(){
	if ( this->robotBattery->isEmpty() || this->pcBattery->isEmpty() )
		this->setStimulusPresent();
}

void GoToBaseGroup::action(){
	if ( !this->inLine() ){
	    this->myBehaviours[0]->action();
	    return;
	}

	if ( this->inLine() && !this->inPosition() ){
	    this->myBehaviours[1]->action();
	    return;
	}
	
    this->myBehaviours[2]->action();
    return;
}

bool GoToBaseGroup::inLine(){
	return (*this->fss).at(0)->getValue() < LINE_THRESHOLD ||
			(*this->fss).at(1)->getValue() < LINE_THRESHOLD ||
			(*this->fss).at(2)->getValue() < LINE_THRESHOLD;
}

bool GoToBaseGroup::inPosition(){
	return fabs( this->wi->getOdometryInfo()->getOrientation() - this->wi->getCurrentLine()->getOrientation() ) < ORIENTATION_TOLE;
}

} /* End of namespace behaviours */
