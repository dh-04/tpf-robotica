// Class automatically generated by Dev-C++ New Class wizard

#include <protocol/handlers/DCMotorBoardPacketHandler.h> // class's header file
#include <protocol/packets/DCMotorPacket.h>
#include <math.h>
#include <stdlib.h>

namespace protocol {
namespace handlers {

// class constructor
DCMotorBoardPacketHandler::DCMotorBoardPacketHandler(PacketServer * ps, char groupid, char boardid)
{
	this->groupid = groupid;
	this->boardid = boardid;
	this->ps = ps;
	this->encoderValue = 0;
	this->speedValue = 0;
	this->consumptionValue = 0;
	this->stressAlarm = false;
	this->shutdownAlarm = false;
	#ifdef LINUX
	this->encoderMutex = new Mutex();
	this->speedMutex = new Mutex();
	this->consumptionValueMutex = new Mutex();
	this->stressMutex = new Mutex();
	this->shutdownMutex = new Mutex();
	#endif
}

// class destructor
DCMotorBoardPacketHandler::~DCMotorBoardPacketHandler()
{
	// insert your code here
}

void DCMotorBoardPacketHandler::handlePacket(Packet * p){
	packets::DCMotorPacket * dcmp = new packets::DCMotorPacket(groupid,boardid);
	dcmp->analysePacket(p);
	
	//ACK commands
	if ( dcmp->getCommand() == CMD_SET_DIRECTION){
		printf("Set direction ACK received\n");
	}
	if ( dcmp->getCommand() == CMD_SET_DC_SPEED){
		printf("Set Speed ACK received\n");
	}	
	if ( dcmp->getCommand() == CMD_SET_ENCODER){
		printf("Set encoder ACK received\n");
	}
	if ( dcmp->getCommand() == CMD_RESET_ENCODER){
		printf("Reset encoder ACK received\n");
	}
	
	if ( dcmp->getCommand() == CMD_SET_ENCODER_T_S){
		printf("Set encoder to stop ACK received\n");
	}
	if ( dcmp->getCommand() == CMD_DONT_STOP){
		printf("Dont stop ACK received\n");
	}
	
	
	if ( dcmp->getCommand() == CMD_GET_ENCODER ){
		int value = dcmp->getEncoderValue();
		// TODO convert from int(4 bytes) to double
		// Lock Mutex
		#ifdef LINUX
		this->encoderMutex->enterMutex();
		#endif
		this->encoderValue = value;
		// Release Mutex
		#ifdef LINUX
		this->encoderMutex->leaveMutex();
		#endif

	}
	if ( dcmp->getCommand() == CMD_GET_DC_SPEED ){
		int value = dcmp->getSpeedValue();
		// TODO convert from int(4 bytes) to double
		// Lock Mutex
		#ifdef LINUX
		this->speedMutex->enterMutex();
		#endif
		this->speedValue = value;
		// Release Mutex
		#ifdef LINUX
		this->speedMutex->leaveMutex();
		#endif

	}
 	if ( dcmp->getCommand() == CMD_MOTOR_CONSUMPTION ){
		int value = dcmp->getMotorConsumptionValue();
		// TODO convert from int(4 bytes) to double
		// Lock Mutex
		#ifdef LINUX
		this->consumptionMutex->enterMutex();
		#endif
		this->consumptionValue = value;
		// Release Mutex
		#ifdef LINUX
		this->consumptionMutex->leaveMutex();
		#endif

	}
	//TODO: No esta implementada esta en el handler?
	// no se guarda en el handler?
	if ( dcmp->getCommand() == CMD_GET_ENCODER_T_S ){
		int value = dcmp->getEncoderValueToStop();
		printf("Number of counts for encoder to stop %d \n",value);
		// TODO convert from int(4 bytes) to double
		// Lock Mutex
		/*
		#ifdef LINUX
		this->consumptionMutex->enterMutex();
		#endif
		this->consumptionValue = value;
		// Release Mutex
		#ifdef LINUX
		this->consumptionMutex->leaveMutex();
		#endif
		*/
	}
	
 	if ( dcmp->isMotorAlarm() ){
		// Lock Mutex
		#ifdef LINUX
		this->stressMutex->enterMutex();
		#endif
		this->stressAlarm = true;
		// Release Mutex
		#ifdef LINUX
		this->stressMutex->leaveMutex();
		#endif

	}
	if ( dcmp->isMotorShutDown() ){
		// Lock Mutex
		#ifdef LINUX
		this->shutdownMutex->enterMutex();
		#endif
		this->shutdownAlarm = true;
		// Release Mutex
		#ifdef LINUX
		this->shutdownMutex->leaveMutex();
		#endif

	}
}

void DCMotorBoardPacketHandler::setSpeed(double value){
	packets::DCMotorPacket * p = new packets::DCMotorPacket(groupid,boardid);
	// TODO convert from double to short
	unsigned short aux = (unsigned short)abs(floor(value));
	if ( value < 0 )
		p->setDCSpeed(false, aux);
	else
		p->setDCSpeed(true, aux);
	p->prepareToSend();
	this->ps->sendPacket(p);
}

double DCMotorBoardPacketHandler::getSpeed(){
   	packets::DCMotorPacket * p = new packets::DCMotorPacket(groupid,boardid);
	p->getDCSpeed();
	p->prepareToSend();
	this->ps->sendPacket(p);
	// Lock mutex

	#ifdef LINUX
	this->speedMutex->enterMutex();
	#endif

	double current = this->speedValue;

	// Release Mutex
	#ifdef LINUX
	this->speedMutex->leaveMutex();
	#endif

	return current;
}

double DCMotorBoardPacketHandler::getEncoder(){
   	packets::DCMotorPacket * p = new packets::DCMotorPacket(groupid,boardid);
	p->getEncoder();
	p->prepareToSend();
	this->ps->sendPacket(p);

	// Lock mutex
	#ifdef LINUX
	this->encoderMutex->enterMutex();
	#endif

    double current = this->encoderValue;

	// Release Mutex
	#ifdef LINUX
	this->encoderMutex->leaveMutex();
	#endif

	return current;
}

void DCMotorBoardPacketHandler::moveWheel(double value){
	packets::DCMotorPacket * p = new packets::DCMotorPacket(groupid,boardid);
	// TODO convert from double to short
	p->setEncoderToStop(value);
	p->prepareToSend();
	this->ps->sendPacket(p);
}

void DCMotorBoardPacketHandler::moveWheel(double counts, double speed){
	this->moveWheel(counts);
	this->setSpeed(speed);
}

double DCMotorBoardPacketHandler::getMotorConsumption(){
   	packets::DCMotorPacket * p = new packets::DCMotorPacket(groupid,boardid);
	p->getMotorConsumption();
	p->prepareToSend();
	this->ps->sendPacket(p);

	// Lock Mutex
	#ifdef LINUX
	this->consumptionMutex->enterMutex();
	#endif

	double value = this->consumptionValue;

	// Release Mutex
	#ifdef LINUX
	this->consumptionMutex->leaveMutex();
	#endif

	return value;
}

bool DCMotorBoardPacketHandler::isAlarmPresent(){
	// Lock Mutex
	#ifdef LINUX
	this->stressMutex->enterMutex();
	#endif

	bool value = this->stressAlarm;

	// Release Mutex
	#ifdef LINUX
	this->stressMutex->leaveMutex();
	#endif
	
	return value;
}

bool DCMotorBoardPacketHandler::motorIsOff(){
	// Lock mutex
	#ifdef LINUX
	this->shutdownMutex->enterMutex();
	#endif

	bool value = this->shutdownAlarm;

	// Release Mutex
	#ifdef LINUX
	this->shutdownMutex->leaveMutex();
	#endif

	// Release mutex
	return value;
}


}
}

