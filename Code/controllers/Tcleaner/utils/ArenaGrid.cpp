// Class automatically generated by Dev-C++ New Class wizard

#include <utils/ArenaGrid.h> // class's header file
#include <ctime>

namespace utils {

// class constructor
ArenaGrid::ArenaGrid(double arenaMinX, double arenaMinZ, double arenaMaxX, double arenaMaxZ,
					int resolutionX,int resolutionZ)
{
	this->xMin = arenaMinX;
	this->zMin = arenaMinZ;
	this->dx = (arenaMaxX - arenaMinX) / (double)resolutionX;
	this->dz = (arenaMaxZ - arenaMinZ) / (double)resolutionZ;
	
	int maxI = this->getI(arenaMaxX);
	int maxJ = this->getJ(arenaMaxZ);

	time_t timestamp = time(NULL);
	for( int i = 0 ; i < maxI ; i++ ){
		for( int j = 0 ; j < maxJ ; j++ ){
			this->slots[i][j] = new utils::ArenaGridSlot(arenaMinX + i*dx,arenaMinZ + j*dz,timestamp);
		}
	}
}

// class destructor
ArenaGrid::~ArenaGrid()
{
	// insert your code here
}

int ArenaGrid::getI(double x){
    return (x - this->xMin)/this->dx;
}

int ArenaGrid::getJ(double z){
	return (z - this->zMin)/this->dz;
}

utils::ArenaGridSlot * ArenaGrid::getSlotAt(utils::MyPoint * p){
	int i = this->getI(p->getX());
	int j = this->getJ(p->getY());

 	utils::ArenaGridSlot * slot = this->slots[i][j];
	return slot;
}

/* i, j-1 ; i, j+1 ; i-1, j ; i+1, j
	Returns four neighbours, the ones at the left, right, top and bottom, in that order
	Some of they may be NULL, indicating that neighbour is out of the arena
*/
std::vector<utils::ArenaGridSlot *> ArenaGrid::getNeighboursAt(utils::MyPoint * p){
	int i = this->getI(p->getX());
	int j = this->getJ(p->getY());
	std::vector<utils::ArenaGridSlot *> out;

	out.push_back(this->slots[i][j-1]);
	out.push_back(this->slots[i][j+1]);
	out.push_back(this->slots[i-1][j]);
	out.push_back(this->slots[i+1][j]);

	return out;
}

}
