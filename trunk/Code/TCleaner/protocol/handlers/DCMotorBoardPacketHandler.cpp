// Class automatically generated by Dev-C++ New Class wizard

#include <protocol/handlers/DCMotorBoardPacketHandler.h> // class's header file
#include <protocol/packets/DCMotorPacket.h>
#include <math.h>

namespace protocol {
namespace handlers {

// class constructor
DCMotorBoardPacketHandler::DCMotorBoardPacketHandler(PacketServer * ps, char groupid, char boardid)
{
	this->groupid = groupid;
	this->boardid = boardid;
	this->ps = ps;
	this->encoderValue = 0;
	this->speedValue = 0;
	this->consumptionValue = 0;
	this->stressAlarm = false;
	this->shutdownAlarm = false;
}

// class destructor
DCMotorBoardPacketHandler::~DCMotorBoardPacketHandler()
{
	// insert your code here
}

void DCMotorBoardPacketHandler::handlePacket(Packet * p){
	packets::DCMotorPacket * dcmp = new packets::DCMotorPacket(groupid,boardid);
	dcmp->analysePacket(p);
	
	if ( dcmp->getCommand() == CMD_GET_ENCODER ){
		int value = dcmp->getEncoderValue();
		// TODO convert from int(4 bytes) to double
		// Lock Mutex
		this->encoderValue = value;
		// Release Mutex
	}
	if ( dcmp->getCommand() == CMD_GET_DC_SPEED ){
		int value = dcmp->getSpeedValue();
		// TODO convert from int(4 bytes) to double
		// Lock Mutex
		this->speedValue = value;
		// Release Mutex
	}
 	if ( dcmp->getCommand() == CMD_MOTOR_CONSUMPTION ){
		int value = dcmp->getMotorConsumptionValue();
		// TODO convert from int(4 bytes) to double
		// Lock Mutex
		this->consumptionValue = value;
		// Release Mutex
	}
 	if ( dcmp->isMotorAlarm() ){
		// Lock Mutex
		this->stressAlarm = true;
		// Release Mutex
	}
	if ( dcmp->isMotorShutDown() ){
		// Lock Mutex
		this->shutdownAlarm = true;
		// Release Mutex
	}
}

void DCMotorBoardPacketHandler::setSpeed(double value){
	packets::DCMotorPacket * p = new packets::DCMotorPacket(groupid,boardid);
	// TODO convert from double to short
	short aux = (short) floor(value);
	p->setDCSpeed(true, aux);
	p->prepareToSend();
	this->ps->sendPacket(p);
}

double DCMotorBoardPacketHandler::getSpeed(){
   	packets::DCMotorPacket * p = new packets::DCMotorPacket(groupid,boardid);
	p->getDCSpeed();
	p->prepareToSend();
	this->ps->sendPacket(p);
	// Lock mutex
    double current = this->speedValue;
	// Release mutex
	return current;
}

double DCMotorBoardPacketHandler::getEncoder(){
   	packets::DCMotorPacket * p = new packets::DCMotorPacket(groupid,boardid);
	p->getEncoder();
	p->prepareToSend();
	this->ps->sendPacket(p);
	// Lock mutex
    double current = this->encoderValue;
	// Release mutex
	return current;
}

void DCMotorBoardPacketHandler::moveWheel(double value){
	packets::DCMotorPacket * p = new packets::DCMotorPacket(groupid,boardid);
	// TODO convert from double to short
	p->setEncoderToStop(value);
	p->prepareToSend();
	this->ps->sendPacket(p);
}

void DCMotorBoardPacketHandler::moveWheel(double counts, double speed){
	this->moveWheel(counts);
	this->setSpeed(speed);
}

double DCMotorBoardPacketHandler::getMotorConsumption(){
   	packets::DCMotorPacket * p = new packets::DCMotorPacket(groupid,boardid);
	p->getMotorConsumption();
	p->prepareToSend();
	this->ps->sendPacket(p);
	return this->consumptionValue;
}

bool DCMotorBoardPacketHandler::isAlarmPresent(){
	// Lock mutex
	bool value = this->stressAlarm;
	// Release mutex
	return value;
}

bool DCMotorBoardPacketHandler::motorIsOff(){
	// Lock mutex
	bool value = this->shutdownAlarm;
	// Release mutex
	return value;
}


}
}

