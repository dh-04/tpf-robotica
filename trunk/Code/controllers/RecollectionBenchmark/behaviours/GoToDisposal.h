// Class automatically generated by Dev-C++ New Class wizard

#ifndef behaviours_GoToDisposal_H
#define behaviours_GoToDisposal_H

#include "AbstractBehaviour.h"
#include "WorldInfo.h"
#include <list>
#include <behaviours/UnloadGarbage.h>
#include <behaviours/FindLine.h>
#include <behaviours/PositionInLine.h>
#include <behaviours/GoToBase.h>

//#define LINE_THRESHOLD 420
#define LINE_THRESHOLD 350
#define ORIENTATION_TOLE 0.3


#define BASE_X -0.874047
#define TOLE 0.2
#define BASE_POSITION (BASE_X+TOLE)

#define AFTER_ALIGN_ORIENTATION -1.59682 //-1.59917

/*
4,686365307179586476925286766559
4.68252

-1.59917
4.6825
*/

#define PASSAGE_BEGIN_X -0.6
#define PASSAGE_LINE_Z 0.100174

#define LINE_MARK_X -0.626685

#define LINE_ORIENTATION_CORRECTION (3.142375307)

// FROM Z TO 1
#define FROM_Z_LEFT (0.382857)

#define X_CORRECTION_LINE (-0.447202)

// FROM Z TO -1
#define FROM_Z_RIGHT (-0.207086)

namespace behaviours {

/**
 * No description
 */
class GoToDisposal : public AbstractBehaviour {

	public:
		GoToDisposal(WorldInfo * wi, robotapi::IRobot * robot, robotapi::ITrashBin * tb, robotapi::IDifferentialWheels * wheels, std::vector<robotapi::IDistanceSensor*> & fss, robotapi::IServo * gate);

		~GoToDisposal();

    	void sense();

	    void action();

	private:
		bool onMark();

		bool inLine();

		bool inPosition();

		void correctOrientation();

	    behaviours::AbstractBehaviour * disposalBehaviours [4];
		robotapi::IDifferentialWheels * wheels;
		robotapi::ITrashBin * trashbin;
		std::vector<robotapi::IDistanceSensor*> * fss;
		WorldInfo * wi;
};

}

#endif // GOTODISPOSAL_H
