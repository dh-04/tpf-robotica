// Class automatically generated by Dev-C++ New Class wizard

#include "GoToDisposal.h" // class's header file
#include "GarbageCleaner.h"
#include <math.h>

namespace behaviours {

// class constructor
GoToDisposal::GoToDisposal(WorldInfo * wi, robotapi::IRobot * robot, robotapi::ITrashBin * tb, robotapi::IDifferentialWheels * wheels, std::vector<robotapi::IDistanceSensor*> & fss, robotapi::IServo * gate) : AbstractBehaviour("Go To Disposal")
{
	this->trashbin = tb;
	this->wi = wi;
	this->fss = &fss;
	this->wheels = wheels;

	this->trashbin->setFullBias(1);

	behaviours::AbstractBehaviour * ab = new behaviours::FindLine( wi, wheels, fss );
	disposalBehaviours[0] = ab;

	ab = new behaviours::PositionInLine( wi, wheels, fss );
	disposalBehaviours[1] = ab;

	ab = new behaviours::GoToBase( wheels, fss );
	disposalBehaviours[2] = ab;

	ab = new behaviours::UnloadGarbage( tb, gate, robot, wheels, fss );
	disposalBehaviours[3] = ab;

}

// class destructor
GoToDisposal::~GoToDisposal()
{
	// insert your code here
}

void GoToDisposal::sense(){

	if ( this->trashbin->isFull() )
		this->setStimulusPresent();

	/*
	for (int j = 0; j < FLOOR_SENSORS; j++){
		printf("Floor sensor %d: %d\n", j, (*this->fss).at(j)->getValue() );
	}
	*/
}

bool followingLine = false;
bool dBeenOnMark = false;

void GoToDisposal::action(){
	double xpos = this->wheels->getPosition()->getX();

	if ( xpos < BASE_POSITION && fabs( this->wheels->getOrientation() - 3*(PI/2)) < ORIENTATION_TOLE ){
		this->disposalBehaviours[3]->action();
		followingLine = false;
		return;
	}

	if ( ! followingLine ){
		dBeenOnMark = false;
		if ( !this->inLine() ){
		    this->disposalBehaviours[0]->action();
	    	printf("Going to line\n");
		    return;
		}

		if ( this->inLine() && !this->inPosition() ){
		    this->disposalBehaviours[1]->action();
	    	printf("On Line, Positioning...\n");
		    return;
		}

	}
	followingLine = true;

	if ( !this->inLine() ){
		if ( xpos < BASE_POSITION ){
			printf("Unloading\n");
			this->disposalBehaviours[3]->action();
		}
		followingLine = false;
	}else{
		if( xpos < PASSAGE_BEGIN_X && this->onMark() && ! dBeenOnMark ){
			printf("On Mark!");
			dBeenOnMark = true;
			this->wheels->setPosition(LINE_MARK_X,PASSAGE_LINE_Z,true);
		}
	    this->disposalBehaviours[2]->action();
		this->correctOrientation();
	    printf("Following Line\n");
	}
    return;
}

void GoToDisposal::correctOrientation(){
	double z = this->wheels->getPosition()->getY();

	if ( this->wheels->getPosition()->getY() > FROM_Z_LEFT ){
		this->wheels->setOrientation(0);
		this->wheels->setPosition(X_CORRECTION_LINE,z,true);
		printf("correcting left\n");
	}

	if ( this->wheels->getPosition()->getY() < FROM_Z_RIGHT ){
		this->wheels->setOrientation(LINE_ORIENTATION_CORRECTION);
		this->wheels->setPosition(X_CORRECTION_LINE,z,true);
		printf("correcting right\n");
	}
}

bool GoToDisposal::onMark(){
	return (*this->fss).at(0)->getValue() < LINE_THRESHOLD &&
			(*this->fss).at(1)->getValue() < LINE_THRESHOLD &&
			(*this->fss).at(2)->getValue() < LINE_THRESHOLD;
}

bool GoToDisposal::inLine(){
	return (*this->fss).at(0)->getValue() < LINE_THRESHOLD ||
			(*this->fss).at(1)->getValue() < LINE_THRESHOLD ||
			(*this->fss).at(2)->getValue() < LINE_THRESHOLD;
}

bool GoToDisposal::inPosition(){
	double targetAngle = PI/2;
	if ( this->wheels->getPosition()->getY() < 0.06 )
	    targetAngle = PI;
	else if ( this->wheels->getPosition()->getY() > 0.15 )
	   	targetAngle = 0;

	return fabs( this->wheels->getOrientation() - targetAngle ) < ORIENTATION_TOLE;
}


} /* End of namespace behaviours */
