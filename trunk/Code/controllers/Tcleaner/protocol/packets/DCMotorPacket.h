// Class automatically generated by Dev-C++ New Class wizard

#ifndef DCMOTORPACKET_H
#define DCMOTORPACKET_H
#include <protocol/packets/BoardPacket.h> // inheriting class's header file

#define CMD_SET_DIRECTION 0x40
#define DIR_CLOCKWISE 0x00
#define DIR_COUNTERCLOCKWISE 0x01

#define CMD_SET_DC_SPEED 0x41
#define CMD_SET_ENCODER 0x42
#define CMD_GET_ENCODER 0x43
#define CMD_RESET_ENCODER 0x44
#define CMD_SET_ENCODER_T_S 0x45
#define CMD_GET_ENCODER_T_S 0x46
#define CMD_DONT_STOP 0x47
#define CMD_MOTOR_CONSUMPTION 0x48
#define CMD_STRESS_ALARM 0x49
#define CMD_SHUTDOWN_ALARM 0x4A
#define CMD_GET_DC_SPEED 0x4B

namespace protocol {
namespace packets {

/**
 * No description
 */
class DCMotorPacket : public protocol::packets::BoardPacket
{
	public:
		// class constructor
		DCMotorPacket(char groupid, char boardid);
		// class destructor
		~DCMotorPacket();
		
		// Commands to be sent
		void setDCSpeed(bool clockwise, short speed);
		void getDCSpeed();
		void setDirection(bool clockwise);
		void setEncoder(int counts);
		void getEncoder();
		void resetEncoder();
		void setEncoderToStop(short counts);
		void getEncoderToStop();
		void setNonStop();
		void getMotorConsumption();

		// Get data from package
		bool isMotorAlarm();
		bool isMotorShutDown();
		int getEncoderValue();
		short getEncoderValueToStop();
		short getSpeedValue();
		short getMotorConsumptionValue();
		short getStressAlarmValue();
		short getShutdownValue();
	private:
		void setDirection(char dir);
};

}
}


#endif // DCMOTORPACKET_H
