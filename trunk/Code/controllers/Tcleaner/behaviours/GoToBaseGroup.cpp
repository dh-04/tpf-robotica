// Class automatically generated by Dev-C++ New Class wizard

#include "GoToBaseGroup.h" // class's header file
#include "GarbageCleaner.h"
#include <math.h>

namespace behaviours {

// class constructor
GoToBaseGroup::GoToBaseGroup(WorldInfo * wi, robotapi::IBattery * robotBatt, robotapi::IBattery * pcBatt, robotapi::IDifferentialWheels * wheels, std::vector<robotapi::IDistanceSensor*> & fss) : AbstractBehaviour("Go To Base Group")
{
	this->robotBattery = robotBatt;
	this->pcBattery = pcBatt;
	this->wi = wi;
	this->fss = &fss;
	this->wheels = wheels;
	
	this->robotBattery->setEmptyBias(3000);
	behaviours::AbstractBehaviour * ab = new behaviours::FindLine( wi, wheels, fss );
	myBehaviours[0] = ab;

	ab = new behaviours::PositionInLine( wi, wheels, fss );
	myBehaviours[1] = ab;

	ab = new behaviours::GoToBase( wheels, fss );
	myBehaviours[2] = ab;
	
}

// class destructor
GoToBaseGroup::~GoToBaseGroup()
{
	// insert your code here
}

void GoToBaseGroup::sense(){
//	this->setStimulusPresent();
	if ( this->robotBattery->isEmpty() || this->pcBattery->isEmpty() )
		this->setStimulusPresent();

        for (int j = 0; j < FLOOR_SENSORS; j++){
			printf("Floor sensor %d: %d\n", j, (*this->fss).at(j)->getValue() );
		}
}

int following = 0;

void GoToBaseGroup::action(){
	if ( ! following ){
		if ( !this->inLine() ){
		    this->myBehaviours[0]->action();
	    	printf("Going to line\n");
		    return;
		}

		if ( this->inLine() && !this->inPosition() ){
		    this->myBehaviours[1]->action();
	    	printf("On Line, Positioning...\n");
		    return;
		}

	}
	following = 1;
    this->myBehaviours[2]->action();
    printf("Following Line\n");
    return;
}

bool GoToBaseGroup::inLine(){
	return (*this->fss).at(0)->getValue() < LINE_THRESHOLD ||
			(*this->fss).at(1)->getValue() < LINE_THRESHOLD ||
			(*this->fss).at(2)->getValue() < LINE_THRESHOLD;
}

bool GoToBaseGroup::inPosition(){
//	return fabs( this->wheels->getOrientation() - this->wi->getCurrentLine()->getOrientation() ) < ORIENTATION_TOLE;
	double targetAngle = 0;
	if ( this->wheels->getPosition()->getY() < 0.1 )
	    targetAngle = PI;
	return fabs( this->wheels->getOrientation() - targetAngle ) < ORIENTATION_TOLE;
}

} /* End of namespace behaviours */
