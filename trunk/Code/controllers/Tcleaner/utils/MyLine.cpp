// Class automatically generated by Dev-C++ New Class wizard

#include <utils/MyLine.h> // class's header file
#include <utils/MyAngle.h>
#include <stdio.h>
#include <math.h>
#define ANGLE_TOLE 0.1

namespace utils {

// class constructor
MyLine::MyLine(double length, double x, double y, double orientation, double width)
{
	this->length = length;
	this->x = x;
	this->y = y;
	this->orientation = new MyAngle(orientation);
	this->width = width;
}

// class destructor
MyLine::~MyLine()
{
	// insert your code here
}

utils::MyPoint * MyLine::getInitialPoint(){
	if ( this->ip == NULL ){
		double x = this->getInitialX();
		double y = this->getInitialY();
		
		this->ip = new utils::MyPoint(x,y);
	}

	return this->ip;
}

double MyLine::getInitialX(){
	if ( this->orientation->differenceTo(MyAngle::zeroAngle()) < ANGLE_TOLE )
	    return x - length/2;
	if ( this->orientation->differenceTo(MyAngle::piAngle()) < ANGLE_TOLE )
	    return x + length/2;
	return x;
}

double MyLine::getInitialY(){
	if ( this->orientation->differenceTo(MyAngle::halfPiAngle()) < ANGLE_TOLE )
	    return y - length/2;
	if ( this->orientation->differenceTo(MyAngle::threeHalvesPiAngle()) < ANGLE_TOLE )
	    return y + length/2;
	return y;
}

utils::MyPoint * MyLine::getFinalPoint(){
	if ( this->fp == NULL ){
		double x = this->getFinalX();
		double y = this->getFinalY();

		this->fp = new utils::MyPoint(x,y);
	}
	return this->fp;
}

double MyLine::getFinalX(){
	if ( this->orientation->differenceTo(MyAngle::zeroAngle()) < ANGLE_TOLE )
	    return x + length/2;
	if ( this->orientation->differenceTo(MyAngle::piAngle()) < ANGLE_TOLE )
	    return x - length/2;
	return x;
}

double MyLine::getFinalY(){
	if ( this->orientation->differenceTo(MyAngle::halfPiAngle()) < ANGLE_TOLE )
	    return y + length/2;
	if ( this->orientation->differenceTo(MyAngle::threeHalvesPiAngle()) < ANGLE_TOLE )
	    return y - length/2;
	return y;
}

double MyLine::getX(){
	return this->x;
}

double MyLine::getY(){
	return this->y;
}

double MyLine::getLength(){
	return this->length;
}

double MyLine::getWidth(){
	return this->width;
}

double MyLine::getOrientation(){
	return this->orientation->getNormalizedValue();
}

}
