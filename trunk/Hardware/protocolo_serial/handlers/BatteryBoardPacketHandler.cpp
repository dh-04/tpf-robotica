// Class automatically generated by Dev-C++ New Class wizard

#include <handlers/BatteryBoardPacketHandler.h> // class's header file
#include <packets/BatteryPacket.h>
#include <math.h>

namespace handlers {

// class constructor
BatteryBoardPacketHandler::BatteryBoardPacketHandler(PacketServer * ps, char groupid, char boardid)
{
	this->groupid = groupid;
	this->boardid = boardid;
	this->ps = ps;
	this->currentValue = 0;
	this->full = false;
	this->empty = false;
}

// class destructor
BatteryBoardPacketHandler::~BatteryBoardPacketHandler()
{
	// insert your code here
}

void BatteryBoardPacketHandler::handlePacket(Packet * p){
	packets::BatteryPacket * dcmp = new packets::BatteryPacket(groupid,boardid);
	dcmp->analysePacket(p);
	
	if ( dcmp->getCommand() == CMD_BATTERY_VALUE ){
		short value = dcmp->getBatteryValue();
		// TODO convert from short to double
		// Lock Mutex
		this->currentValue = value;
		// Release Mutex
	}
	if ( dcmp->isBatteryFull() ){
		// TODO convert from short to double
		// Lock Mutex
		this->full = true;
		// Release Mutex
	}
	if ( dcmp->isBatteryEmpty() ){
		// TODO convert from short to double
		// Lock Mutex
		this->empty = true;
		// Release Mutex
	}
}

double BatteryBoardPacketHandler::getValue(){
 	packets::BatteryPacket * p = new packets::BatteryPacket(groupid,boardid);
	p->senseBattery();
	p->prepareToSend();
	this->ps->sendPacket(p);
	return this->currentValue;
}

bool BatteryBoardPacketHandler::isFull(){
	// Lock mutex
	bool full = this->full;
	// Release mutex
	return full;
}

void BatteryBoardPacketHandler::setEmptyBias(double bias){
	packets::BatteryPacket * p = new packets::BatteryPacket(groupid,boardid);
	// TODO convert from double to char
	p->setBatteryEmptyThreshold(bias);
	p->prepareToSend();
	this->ps->sendPacket(p);
}

bool BatteryBoardPacketHandler::isEmpty(){
	// Lock mutex
	bool empty = this->empty;
	// Release mutex
	return empty;
}

void BatteryBoardPacketHandler::setFullBias(double bias){
	packets::BatteryPacket * p = new packets::BatteryPacket(groupid,boardid);
	// TODO convert from double to char
	p->setBatteryFullThreshold(bias);
	p->prepareToSend();
	this->ps->sendPacket(p);
}

}
