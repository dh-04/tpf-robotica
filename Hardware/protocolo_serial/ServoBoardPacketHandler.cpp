// Class automatically generated by Dev-C++ New Class wizard

#include "ServoBoardPacketHandler.h" // class's header file
#include "ServoMotorPacket.h"
#include <math.h>

// class constructor
ServoBoardPacketHandler::ServoBoardPacketHandler(PacketServer * ps, char groupid, char boardid)
{
	this->groupid = groupid;
	this->boardid = boardid;
	this->ps = ps;
	this->positionValue[0] = 0;
	this->positionValue[1] = 0;
	this->positionValue[2] = 0;
	this->positionValue[3] = 0;
	this->positionValue[4] = 0;
}

// class destructor
ServoBoardPacketHandler::~ServoBoardPacketHandler()
{
	// insert your code here
}

void ServoBoardPacketHandler::handlePacket(Packet * p){
	ServoMotorPacket * dcmp = new ServoMotorPacket(groupid,boardid);
	dcmp->analysePacket(p);
	
	if ( p->getCommand() == CMD_GET_ALL_POSITIONS ){
		char * value = dcmp->getPositionValues();
		// TODO convert from short to double
		// Lock Mutex
		this->positionValue[0] = value[0];
		this->positionValue[1] = value[1];
		this->positionValue[2] = value[2];
		this->positionValue[3] = value[3];
		this->positionValue[4] = value[4];
		// Release Mutex
	}
}

void ServoBoardPacketHandler::setPosition(int servoId, double position){
	ServoMotorPacket * p = new ServoMotorPacket(groupid,boardid);
	// TODO convert from double to short
	short aux = (short) floor(position);
	p->setPosition(servoId, aux);
	p->prepareToSend();
	this->ps->sendPacket(p);
}

void ServoBoardPacketHandler::setSpeed(int servoId, double speed){
	ServoMotorPacket * p = new ServoMotorPacket(groupid,boardid);
	// TODO convert from double to short
	short aux = (short) floor(speed);
	p->setSpeed(servoId, aux);
	p->prepareToSend();
	this->ps->sendPacket(p);
}

double ServoBoardPacketHandler::getPosition(int servoId){
	// TODO Put timestamps to prevent flooding
   	ServoMotorPacket * p = new ServoMotorPacket(groupid,boardid);
	p->getPosition();
	p->prepareToSend();
	this->ps->sendPacket(p);
	return this->positionValue[servoId];
}

void ServoBoardPacketHandler::setForce(int servoId, double force){
	if ( force == 0 ){
	   	ServoMotorPacket * p = new ServoMotorPacket(groupid,boardid);
	   	// TODOOOOOOOOOO Convert
		p->freeServo(servoId);
		p->prepareToSend();
		this->ps->sendPacket(p);
	}else{
		this->setPosition(servoId, this->positionValue[servoId]);
	}
}
